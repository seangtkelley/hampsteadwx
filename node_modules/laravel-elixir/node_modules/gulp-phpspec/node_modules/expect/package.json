{
  "name": "expect",
  "version": "1.9.0",
  "description": "Write better assertions",
  "main": "modules/index.js",
  "dependencies": {
    "assert": "^1.3.0"
  },
  "devDependencies": {
    "jshint": "^2.5.10",
    "karma": "^0.12.28",
    "karma-chrome-launcher": "^0.1.7",
    "karma-cli": "0.0.4",
    "karma-mocha": "^0.1.10",
    "karma-sourcemap-loader": "^0.3.2",
    "karma-webpack": "^1.3.1",
    "mocha": "^2.0.1",
    "webpack": "^1.4.13"
  },
  "scripts": {
    "dist": "webpack -p modules/index.js dist/expect.min.js",
    "test": "jshint . && mocha --reporter spec 'modules/**/__tests__/*-test.js'",
    "test-browser": "karma start"
  },
  "keywords": [
    "expect",
    "assert",
    "test",
    "spec"
  ],
  "author": {
    "name": "Michael Jackson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/mjackson/expect.git"
  },
  "bugs": {
    "url": "https://github.com/mjackson/expect/issues"
  },
  "homepage": "https://github.com/mjackson/expect",
  "readme": "[![build status](https://img.shields.io/travis/mjackson/expect.svg?style=flat-square)](https://travis-ci.org/mjackson/expect)\n[![npm package](https://img.shields.io/npm/v/expect.svg?style=flat-square)](https://www.npmjs.org/package/expect)\n\n[expect](https://github.com/mjackson/expect) is a thin wrapper around node's [assert](http://nodejs.org/api/assert.html) module that lets you write better assertions.\n\nWhen you use expect, you write assertions similarly to how you would say them, e.g. \"I expect this value to be equal to 3\" or \"I expect this array to contain 3\". When you write assertions in this way, you don't need to remember the order of actual and expected arguments to functions like `assert.equal`, which helps you write better tests.\n\n### Usage\n\n##### expect(object).toBe(value, [message])\n\nAsserts that `object` is strictly equal to `value` using [assert.strictEqual](http://nodejs.org/api/assert.html#assert_assert_strictequal_actual_expected_message).\n\n##### expect(object).toNotBe(value, [message])\n\nAsserts that `object` is not strictly equal to `value` using [assert.notStrictEqual](http://nodejs.org/api/assert.html#assert_assert_notstrictequal_actual_expected_message).\n\n##### expect(object).toEqual(value, [message])\n\nAsserts that the given `object` equals `value` using [assert.deepEqual](http://nodejs.org/api/assert.html#assert_assert_deepequal_actual_expected_message).\n\n##### expect(object).toNotEqual(value, [message])\n\nAsserts that the given `object` is not equal to `value` using [assert.notDeepEqual](http://nodejs.org/api/assert.html#assert_assert_notdeepequal_actual_expected_message).\n\n##### expect(block).toThrow([error], [message])\n\nAsserts that the given `block` throws an error using [assert.throws](http://nodejs.org/api/assert.html#assert_assert_throws_block_error_message). The `error` argument may be a constructor, `RegExp`, or validation function.\n\n```js\nexpect(function () {\n  throw new Error('boom!');\n}).toThrow(/boom/);\n```\n\n##### expect(block).withArgs(arg1[,arg2...]).toThrow([error], [message])\n\nAsserts that the given `block` throws an error, when called `args`, using [assert.throws](http://nodejs.org/api/assert.html#assert_assert_throws_block_error_message). The `error` argument may be a constructor, `RegExp`, or validation function.\n\n```js\nexpect(function (check) {\n  if (check === 'bad') {\n    throw new Error('boom!');\n  }\n}).withArgs('bad').toThrow(/boom/);\n```\n\n##### expect(block).withContext(context).toThrow([error], [message])\n\nAsserts that the given `block` throws an error, when called on `context`, using [assert.throws](http://nodejs.org/api/assert.html#assert_assert_throws_block_error_message). The `error` argument may be a constructor, `RegExp`, or validation function.\n\n```js\nexpect(function () {\n  if (this.check === 'bad') {\n    throw new Error('boom!');\n  }\n}).withContext({ check: 'bad' }).toThrow(/boom/);\n```\n\n##### expect(block).toNotThrow([message])\n\nAsserts that the given `block` does not throw using [assert.doesNotThrow](http://nodejs.org/api/assert.html#assert_assert_doesnotthrow_block_message).\n\n##### expect(object).toExist([message])\n\nAsserts the given `object` is truthy.\n\n```js\nexpect('something truthy').toExist();\n```\n\n##### expect(object).toNotExist([message])\n\nAsserts the given `object` is falsy.\n\n```js\nexpect(null).toNotExist();\n```\n\n##### expect(object).toBeA(constructor, [message])\n##### expect(object).toBeAn(constructor, [message])\n\nAsserts the given `object` is an `instanceof constructor`.\n\n```js\nexpect(new User).toBeA(User);\nexpect(new Asset).toBeAn(Asset);\n```\n\n##### expect(object).toBeA(string, [message])\n\nAsserts the `typeof` the given `object` is `string`.\n\n```js\nexpect(2).toBeA('number');\n```\n\n##### expect(string).toMatch(pattern, [message])\n\nAsserts the given `string` matches `pattern`, which must be a `RegExp`.\n\n```js\nexpect('a string').toMatch(/string/);\n```\n\n##### expect(number).toBeLessThan(value, [message])\n##### expect(number).toBeFewerThan(value, [message])\n\nAsserts the given `number` is less than `value`.\n\n```js\nexpect(2).toBeLessThan(3);\n```\n\n##### expect(number).toBeGreaterThan(value, [message])\n##### expect(number).toBeMoreThan(value, [message])\n\nAsserts the given `number` is greater than `value`.\n\n```js\nexpect(3).toBeGreaterThan(2);\n```\n\n##### expect(array).toInclude(value, [comparator], [message])\n##### expect(array).toContain(value, [comparator], [message])\n\nAsserts the given `array` contains `value`. The `comparator` function, if given, should compare two objects and either `return false` or `throw` if they are not equal. It defaults to `assert.deepEqual`.\n\n```js\nexpect([ 1, 2, 3 ]).toInclude(3);\n```\n\n##### expect(array).toExclude(value, [comparator], [message])\n##### expect(array).toNotContain(value, [comparator], [message])\n\nAsserts the given `array` does not contain `value`. The `comparator` function, if given, should compare two objects and either `return false` or `throw` if they are not equal. It defaults to `assert.deepEqual`.\n\n```js\nexpect([ 1, 2, 3 ]).toExclude(4);\n```\n\n##### expect(string).toInclude(value, [message])\n##### expect(string).toContain(value, [message])\n\nAsserts the given `string` contains `value`.\n\n```js\nexpect('hello world').toInclude('world');\nexpect('hello world').toContain('world');\n```\n\n##### expect(string).toExclude(value, [message])\n##### expect(string).toNotContain(value, [message])\n\nAsserts the given `string` does not contain `value`.\n\n```js\nexpect('hello world').toExclude('goodbye');\nexpect('hello world').toNotContain('goodbye');\n```\n\n### Spies\n\nexpect.js also includes the ability to create spy functions that can track the calls that are made to other functions and make various assertions based on the arguments and context that were used.\n\n```js\nvar video = {\n  play: function () {},\n  pause: function () {},\n  rewind: function () {}\n};\n\nvar spy = expect.spyOn(video, 'play');\n\nvideo.play('some', 'args');\n\nexpect(spy.calls.length).toEqual(1);\nexpect(spy.calls[0].context).toBe(video);\nexpect(spy.calls[0].arguments).toEqual([ 'some', 'args' ]);\nexpect(spy).toHaveBeenCalled();\nexpect(spy).toHaveBeenCalledWith('some', 'args');\n```\n\n### Chaining Assertions\n\nEvery assertion returns an `Expectation` object, so you can chain assertions together.\n\n```js\nexpect(3.14)\n  .toExist()\n  .toBeLessThan(4)\n  .toBeGreaterThan(3);\n```\n\n### Installation\n\nUsing [npm](https://www.npmjs.org/):\n\n    $ npm install expect\n\nOr, include `dist/expect.min.js` in your page using a `<script>` tag:\n\n```html\n<script src=\"expect.min.js\"></script>\n```\n\n### Issues\n\nPlease file issues on the [issue tracker on GitHub](https://github.com/mjackson/expect/issues).\n\n### Tests\n\nTo run the tests in node:\n\n    $ npm install\n    $ npm test\n\nTo run the tests in Chrome:\n\n    $ npm install\n    $ npm run test-browser\n\n### License\n\n[MIT](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "expect@1.9.0",
  "dist": {
    "shasum": "cfe42b05aeb3f955771c0a4c8b3896f70f396404"
  },
  "_from": "expect@^1.6.0",
  "_resolved": "https://registry.npmjs.org/expect/-/expect-1.9.0.tgz"
}
